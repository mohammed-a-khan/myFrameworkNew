# SQL Queries Repository
# Format: module.query.name=SQL Query

# User Queries
user.select.all=SELECT * FROM users
user.select.by.id=SELECT * FROM users WHERE id = ?
user.select.by.email=SELECT * FROM users WHERE email = ?
user.select.active=SELECT * FROM users WHERE status = 'ACTIVE'
user.insert=INSERT INTO users (username, email, password, status) VALUES (?, ?, ?, ?)
user.update=UPDATE users SET username = ?, email = ?, status = ? WHERE id = ?
user.delete=DELETE FROM users WHERE id = ?
user.count.total=SELECT COUNT(*) FROM users
user.count.active=SELECT COUNT(*) FROM users WHERE status = 'ACTIVE'
user.exists.email=SELECT COUNT(*) > 0 FROM users WHERE email = ?

# Product Queries
product.select.all=SELECT * FROM products
product.select.by.id=SELECT * FROM products WHERE id = ?
product.select.by.category=SELECT * FROM products WHERE category_id = ?
product.select.in.stock=SELECT * FROM products WHERE stock > 0
product.select.featured=SELECT * FROM products WHERE is_featured = true
product.insert=INSERT INTO products (name, description, price, category_id, stock) VALUES (?, ?, ?, ?, ?)
product.update.stock=UPDATE products SET stock = stock + ? WHERE id = ?
product.update.price=UPDATE products SET price = ? WHERE id = ?
product.delete=DELETE FROM products WHERE id = ?
product.search=SELECT * FROM products WHERE LOWER(name) LIKE LOWER(?) OR LOWER(description) LIKE LOWER(?)

# Order Queries
order.select.all=SELECT * FROM orders
order.select.by.id=SELECT * FROM orders WHERE id = ?
order.select.by.user=SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC
order.select.by.status=SELECT * FROM orders WHERE status = ?
order.select.recent=SELECT * FROM orders WHERE created_at >= ? ORDER BY created_at DESC
order.insert=INSERT INTO orders (user_id, total_amount, status, created_at) VALUES (?, ?, ?, ?)
order.update.status=UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
order.count.by.status=SELECT status, COUNT(*) as count FROM orders GROUP BY status
order.total.revenue=SELECT SUM(total_amount) FROM orders WHERE status = 'COMPLETED'

# Order Items Queries
order.items.select.by.order=SELECT * FROM order_items WHERE order_id = ?
order.items.insert=INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)
order.items.delete.by.order=DELETE FROM order_items WHERE order_id = ?

# Cart Queries
cart.select.by.user=SELECT c.*, p.name, p.price FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = ?
cart.insert=INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)
cart.update.quantity=UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?
cart.delete.item=DELETE FROM cart WHERE user_id = ? AND product_id = ?
cart.clear=DELETE FROM cart WHERE user_id = ?
cart.count.items=SELECT COUNT(*) FROM cart WHERE user_id = ?

# Category Queries
category.select.all=SELECT * FROM categories ORDER BY name
category.select.by.id=SELECT * FROM categories WHERE id = ?
category.select.with.count=SELECT c.*, COUNT(p.id) as product_count FROM categories c LEFT JOIN products p ON c.id = p.category_id GROUP BY c.id

# Review Queries
review.select.by.product=SELECT r.*, u.username FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ? ORDER BY r.created_at DESC
review.insert=INSERT INTO reviews (product_id, user_id, rating, comment, created_at) VALUES (?, ?, ?, ?, ?)
review.average.rating=SELECT AVG(rating) as avg_rating, COUNT(*) as review_count FROM reviews WHERE product_id = ?

# Analytics Queries
analytics.sales.by.month=SELECT DATE_TRUNC('month', created_at) as month, SUM(total_amount) as revenue FROM orders WHERE status = 'COMPLETED' GROUP BY month ORDER BY month
analytics.top.products=SELECT p.id, p.name, SUM(oi.quantity) as total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id JOIN orders o ON oi.order_id = o.id WHERE o.status = 'COMPLETED' GROUP BY p.id, p.name ORDER BY total_sold DESC LIMIT 10
analytics.user.activity=SELECT DATE(created_at) as date, COUNT(DISTINCT user_id) as active_users FROM user_activity WHERE created_at >= ? GROUP BY date ORDER BY date

# Test Data Queries
test.cleanup.orders=DELETE FROM orders WHERE user_id IN (SELECT id FROM users WHERE email LIKE '%@test.com')
test.cleanup.users=DELETE FROM users WHERE email LIKE '%@test.com'
test.reset.sequence=ALTER SEQUENCE {table}_id_seq RESTART WITH 1
test.create.user=INSERT INTO users (username, email, password, status, created_at) VALUES (?, ?, ?, 'ACTIVE', CURRENT_TIMESTAMP) RETURNING id
test.create.product=INSERT INTO products (name, description, price, category_id, stock, created_at) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP) RETURNING id

# Reporting Queries
report.test.summary=SELECT test_suite, COUNT(*) as total, SUM(CASE WHEN status = 'PASSED' THEN 1 ELSE 0 END) as passed, SUM(CASE WHEN status = 'FAILED' THEN 1 ELSE 0 END) as failed FROM test_results WHERE execution_id = ? GROUP BY test_suite
report.execution.details=SELECT * FROM test_executions WHERE id = ?
report.failure.analysis=SELECT error_type, COUNT(*) as count FROM test_results WHERE status = 'FAILED' AND execution_id = ? GROUP BY error_type ORDER BY count DESC