package com.testforge.cs.driver;

import com.testforge.cs.config.CSConfigManager;
import com.testforge.cs.exceptions.CSFrameworkException;
import com.testforge.cs.exceptions.CSWebDriverException;
import com.testforge.cs.screenshot.CSScreenshotUtils;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.safari.SafariOptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Semaphore;

/**
 * WebDriver factory and manager for creating and managing browser instances
 * Supports Chrome, Firefox, Edge, Safari with local and remote execution
 */
public class CSWebDriverManager {
    private static final Logger logger = LoggerFactory.getLogger(CSWebDriverManager.class);
    private static final CSConfigManager config = CSConfigManager.getInstance();
    
    private static final ThreadLocal<WebDriver> threadLocalDriver = new ThreadLocal<>();
    private static final Map<String, WebDriver> driverPool = new ConcurrentHashMap<>();
    private static final java.util.concurrent.atomic.AtomicInteger browserCount = new java.util.concurrent.atomic.AtomicInteger(0);
    private static volatile int maxBrowsersAllowed = Integer.MAX_VALUE;
    private static Semaphore browserSemaphore = new Semaphore(Integer.MAX_VALUE);
    private static final Object ieDriverLock = new Object(); // Synchronization for IE driver creation
    
    // Register shutdown hook to ensure all browsers are closed
    static {
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            logger.info("JVM shutdown detected - cleaning up all browsers");
            quitAllDrivers();
        }));
    }
    
    /**
     * Set maximum number of browsers allowed
     */
    public static synchronized void setMaxBrowsersAllowed(int max) {
        maxBrowsersAllowed = max;
        browserSemaphore = new Semaphore(max);
        logger.info("Maximum browsers allowed set to: {} (Semaphore permits: {})", max, browserSemaphore.availablePermits());
    }
    
    /**
     * Create WebDriver instance
     */
    public static WebDriver createDriver(String browserType, boolean headless, Map<String, Object> capabilities) {
        String threadName = Thread.currentThread().getName();
        long threadId = Thread.currentThread().getId();
        
        // Check if this thread already has a driver
        WebDriver existingDriver = threadLocalDriver.get();
        if (existingDriver != null) {
            try {
                // Check if the driver is still valid
                existingDriver.getTitle();
                logger.warn("Thread {} (ID: {}) already has an ACTIVE driver! Returning existing driver.", threadName, threadId);
                return existingDriver;
            } catch (Exception e) {
                logger.info("Thread {} (ID: {}) has a stale driver, will create new one", threadName, threadId);
                threadLocalDriver.remove();
                String threadIdKey = String.valueOf(threadId);
                driverPool.remove(threadIdKey);
            }
        }
        
        // Try to acquire a permit to create a browser
        boolean acquired = false;
        try {
            logger.info("Thread {} attempting to acquire browser permit. Available permits: {}", 
                threadName, browserSemaphore.availablePermits());
            acquired = browserSemaphore.tryAcquire();
            if (!acquired) {
                logger.error("!!! BROWSER LIMIT REACHED !!! Thread {} cannot create browser. Max allowed: {}", 
                    threadName, maxBrowsersAllowed);
                return null;
            }
            logger.info("Thread {} acquired browser permit successfully", threadName);
        } catch (Exception e) {
            logger.error("Error acquiring browser permit", e);
            return null;
        }
        
        int currentCount = browserCount.incrementAndGet();
        logger.error("!!! BROWSER #{} BEING CREATED !!! Thread: {} (ID: {}), Type: {}", 
            currentCount, threadName, threadId, browserType);
        logger.error("Current driver pool size before creation: {}", driverPool.size());
        
        WebDriver driver = null;
        
        try {
            // Check if remote execution is enabled
            String remoteUrl = config.getProperty("selenium.remote.url");
            if (remoteUrl != null && !remoteUrl.isEmpty()) {
                driver = createRemoteDriver(browserType, remoteUrl, headless, capabilities);
            } else {
                driver = createLocalDriver(browserType, headless, capabilities);
            }
            
            // Configure driver
            configureDriver(driver);
            
            // Store in thread local
            threadLocalDriver.set(driver);
            
            // Store in pool with thread ID
            String threadIdKey = String.valueOf(threadId);
            driverPool.put(threadIdKey, driver);
            
            logger.info("Browser successfully created for thread {}. Active browsers: {}", 
                threadName, driverPool.size());
            
            return driver;
        } catch (Exception e) {
            // If driver creation fails, release the permit
            if (acquired) {
                browserSemaphore.release();
                logger.info("Released browser permit due to creation failure");
            }
            throw e;
        }
    }
    
    /**
     * Create local WebDriver
     */
    private static WebDriver createLocalDriver(String browserType, boolean headless, Map<String, Object> capabilities) {
        switch (browserType.toLowerCase()) {
            case "chrome":
                return createChromeDriver(headless, capabilities);
            case "firefox":
                return createFirefoxDriver(headless, capabilities);
            case "edge":
                return createEdgeDriver(headless, capabilities);
            case "safari":
                return createSafariDriver(capabilities);
            case "ie":
            case "internetexplorer":
            case "internet explorer":
                // Always use IE driver - it will trigger Edge in IE mode on Windows 11
                return createInternetExplorerDriver(capabilities);
            default:
                throw new CSFrameworkException("Unsupported browser type: " + browserType);
        }
    }
    
    /**
     * Create Chrome driver
     */
    private static WebDriver createChromeDriver(boolean headless, Map<String, Object> capabilities) {
        // Setup ChromeDriver using WebDriverManager
        WebDriverManager.chromedriver().setup();
        
        ChromeOptions options = new ChromeOptions();
        
        if (headless) {
            options.addArguments("--headless=new");
        }
        
        // Add default arguments
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        options.addArguments("--disable-blink-features=AutomationControlled");
        options.setExperimentalOption("excludeSwitches", new String[]{"enable-automation"});
        options.setExperimentalOption("useAutomationExtension", false);
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach((key, value) -> {
                if (value instanceof String) {
                    options.addArguments(key + "=" + value);
                } else {
                    options.setCapability(key, value);
                }
            });
        }
        
        // Add preferences
        Map<String, Object> prefs = new HashMap<>();
        prefs.put("credentials_enable_service", false);
        prefs.put("profile.password_manager_enabled", false);
        String downloadPath = config.getProperty("download.directory", System.getProperty("user.dir") + "/downloads");
        prefs.put("download.default_directory", downloadPath);
        prefs.put("download.prompt_for_download", false);
        prefs.put("safebrowsing.enabled", true);
        options.setExperimentalOption("prefs", prefs);
        
        return new ChromeDriver(options);
    }
    
    /**
     * Create Firefox driver
     */
    private static WebDriver createFirefoxDriver(boolean headless, Map<String, Object> capabilities) {
        // Setup FirefoxDriver using WebDriverManager
        WebDriverManager.firefoxdriver().setup();
        
        FirefoxOptions options = new FirefoxOptions();
        
        if (headless) {
            options.addArguments("--headless");
        }
        
        // Add preferences
        String downloadPath = config.getProperty("download.directory", System.getProperty("user.dir") + "/downloads");
        options.addPreference("browser.download.folderList", 2);
        options.addPreference("browser.download.dir", downloadPath);
        options.addPreference("browser.download.useDownloadDir", true);
        options.addPreference("browser.helperApps.neverAsk.saveToDisk", 
            "application/pdf,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach(options::setCapability);
        }
        
        return new FirefoxDriver(options);
    }
    
    /**
     * Create Edge driver
     */
    private static WebDriver createEdgeDriver(boolean headless, Map<String, Object> capabilities) {
        // Setup EdgeDriver using WebDriverManager
        WebDriverManager.edgedriver().setup();
        
        EdgeOptions options = new EdgeOptions();
        
        if (headless) {
            options.addArguments("--headless=new");
        }
        
        // Add default arguments (similar to Chrome)
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach(options::setCapability);
        }
        
        return new EdgeDriver(options);
    }
    
    /**
     * Create Safari driver
     */
    private static WebDriver createSafariDriver(Map<String, Object> capabilities) {
        SafariOptions options = new SafariOptions();
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach(options::setCapability);
        }
        
        return new SafariDriver(options);
    }
    
    /**
     * Create Internet Explorer driver
     * Note: IE requires specific setup:
     * 1. Enable Protected Mode must be same for all zones
     * 2. Enhanced Protected Mode must be disabled
     * 3. Zoom level must be 100%
     * 4. IEDriverServer.exe must be in PATH or use WebDriverManager
     */
    private static WebDriver createInternetExplorerDriver(Map<String, Object> capabilities) {
        // IE doesn't handle parallel driver creation well, so synchronize
        synchronized (ieDriverLock) {
            logger.info("Thread {} acquiring IE driver creation lock", Thread.currentThread().getName());
            
            // Check Windows version
            boolean isWindows11 = isWindows11();
            
            if (isWindows11) {
                logger.warn("Windows 11 detected - Edge will open in IE compatibility mode");
                logger.warn("Note: Navigation may be slower as IEDriverServer communicates through IE mode");
            }
            
            // Setup IEDriver using WebDriverManager
            // Use 32-bit driver for better compatibility with Edge IE mode
            logger.info("Using 32-bit IEDriverServer for IE mode compatibility");
            WebDriverManager.iedriver().arch32().setup();
            
            InternetExplorerOptions options = new InternetExplorerOptions();
            
            // For Windows 11 - Enable Edge IE mode compatibility (QAF-style configuration)
            if (isWindows11) {
                logger.info("Configuring for Windows 11 Edge IE mode using QAF approach...");
                
                // QAF uses these exact settings for Edge IE mode
                options.attachToEdgeChrome();
                options.withEdgeExecutablePath("C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe");
                
                // CRITICAL: Force create process - this is what QAF does
                options.setCapability(InternetExplorerDriver.FORCE_CREATE_PROCESS, true);
                options.setCapability(InternetExplorerDriver.IE_SWITCHES, "-private");
                
                // Enable Edge Chromium mode - QAF style
                options.setCapability("ie.edgechromium", true);
                options.setCapability("ie.edgepath", "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe");
                
                // Standard IE capabilities
                options.ignoreZoomSettings();
                options.setCapability("ignoreProtectedModeSettings", true);
                options.setCapability("requireWindowFocus", false);
                options.setCapability("enablePersistentHover", false);
                options.setCapability("nativeEvents", false);
                
                // Additional QAF-style settings
                options.setCapability("browserCommandLineSwitches", "-private");
                options.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION, true);
            }
            
            // Use IE-specific methods where available
            if (config.getBooleanProperty("ie.ignore.security.domains", true)) {
                options.introduceFlakinessByIgnoringSecurityDomains();
            }
            
            if (config.getBooleanProperty("ie.ignore.zoom", true)) {
                options.ignoreZoomSettings();
            }
            
            if (config.getBooleanProperty("ie.require.window.focus", false)) {
                options.requireWindowFocus();
            }
            
            if (config.getBooleanProperty("ie.enable.persistent.hovering", true)) {
                options.enablePersistentHovering();
            }
            
            // Don't use native events with Edge redirection
            if (config.getBooleanProperty("ie.native.events", false)) {
                options.usePerProcessProxy();
            }
            
            // This option doesn't have a dedicated method, but is still needed for IE
            if (config.getBooleanProperty("ie.ignore.protected.mode", true)) {
                options.setCapability("ignoreProtectedModeSettings", true);
            }
            
            // Don't clear session when using Edge redirection - it might cause issues
            if (config.getBooleanProperty("ie.ensure.clean.session", false)) {
                options.destructivelyEnsureCleanSession();
            }
            
            // Set initial browser URL - use blank page
            options.withInitialBrowserUrl("about:blank");
        
        // Set page load strategy
        String pageLoadStrategy = config.getProperty("ie.page.load.strategy", "normal");
        options.setPageLoadStrategy(PageLoadStrategy.valueOf(pageLoadStrategy.toUpperCase()));
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach(options::setCapability);
        }
        
        logger.info("Creating Internet Explorer driver with security domains ignored: {}", 
            config.getBooleanProperty("ie.ignore.security.domains", true));
        
            try {
                // Add a delay to prevent IE initialization conflicts
                Thread.sleep(1000);
                
                logger.info("Attempting to create InternetExplorerDriver instance...");
                if (isWindows11) {
                    logger.warn("Windows 11 detected - Edge will open in IE mode");
                    logger.warn("Initial connection may take 10-30 seconds, please wait...");
                }
                
                // Create driver with longer timeout for Windows 11
                InternetExplorerDriver driver = null;
                
                if (isWindows11) {
                    // For Windows 11, try with a timeout mechanism
                    java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor();
                    java.util.concurrent.Future<InternetExplorerDriver> future = executor.submit(() -> {
                        try {
                            logger.info("Creating IE driver (this may take up to 45 seconds on Windows 11)...");
                            logger.info("Calling new InternetExplorerDriver(options)...");
                            InternetExplorerDriver ieDriver = new InternetExplorerDriver(options);
                            logger.info("InternetExplorerDriver constructor returned");
                            return ieDriver;
                        } catch (Exception e) {
                            logger.error("Exception in IE driver creation: {}", e.getMessage(), e);
                            throw new RuntimeException(e);
                        }
                    });
                    
                    try {
                        // Give it 45 seconds to create the driver on Windows 11
                        driver = future.get(45, java.util.concurrent.TimeUnit.SECONDS);
                        logger.info("IE driver created successfully after timeout wait");
                    } catch (java.util.concurrent.TimeoutException e) {
                        logger.error("IE driver creation timed out after 45 seconds");
                        logger.error("This is a known issue with Windows 11 and IEDriverServer");
                        logger.error("SOLUTION: Use Edge browser instead with: browser.name=edge");
                        future.cancel(true);
                        executor.shutdownNow();
                        
                        // Try to kill any hanging IEDriverServer processes
                        try {
                            Runtime.getRuntime().exec("taskkill /F /IM IEDriverServer.exe");
                            Runtime.getRuntime().exec("taskkill /F /IM msedge.exe");
                            Thread.sleep(2000);
                        } catch (Exception ex) {
                            logger.debug("Failed to kill processes: {}", ex.getMessage());
                        }
                        
                        throw new CSWebDriverException(
                            "IE driver cannot work with Windows 11. Edge opens but IEDriverServer cannot control it. " +
                            "Please use 'browser.name=edge' instead for Windows 11."
                        );
                    } finally {
                        executor.shutdown();
                    }
                } else {
                    // For Windows 10 and earlier, create normally
                    driver = new InternetExplorerDriver(options);
                }
                
                logger.info("Driver instance created");
                
                // Wait for the browser to stabilize
                Thread.sleep(2000);
                
                // Set timeouts with longer values for IE mode
                try {
                    driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(120)); // Longer timeout for IE mode
                    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
                    driver.manage().timeouts().scriptTimeout(Duration.ofSeconds(60));
                    logger.info("Timeouts configured for IE mode");
                } catch (Exception e) {
                    logger.warn("Failed to set timeouts: {}", e.getMessage());
                }
                
                // Try to navigate away from about:blank to establish connection
                try {
                    logger.info("Establishing connection with browser...");
                    driver.get("about:blank");
                    Thread.sleep(1000);
                    logger.info("Connection established");
                } catch (Exception e) {
                    logger.warn("Initial navigation warning (expected on Windows 11): {}", e.getMessage());
                }
                
                // Get browser info
                try {
                    String browserName = driver.getCapabilities().getBrowserName();
                    logger.info("Browser connected: {}", browserName);
                    
                    if (browserName != null && browserName.toLowerCase().contains("edge")) {
                        logger.info("Confirmed: Running on Edge in IE compatibility mode");
                    }
                } catch (Exception e) {
                    logger.debug("Could not get browser info: {}", e.getMessage());
                }
                
                logger.info("InternetExplorerDriver ready for use");
                logger.info("Thread {} releasing IE driver creation lock", Thread.currentThread().getName());
                return driver;
            } catch (Exception e) {
                logger.error("Failed to create Internet Explorer driver: {}", e.getMessage());
                logger.error("Common causes:");
                logger.error("1. Protected Mode settings are not the same for all zones");
                logger.error("2. Enhanced Protected Mode is enabled");
                logger.error("3. Browser zoom level is not 100%");
                logger.error("4. IE is not installed or IEDriverServer.exe is not compatible");
                logger.info("Thread {} releasing IE driver creation lock after error", Thread.currentThread().getName());
                throw new CSWebDriverException("Failed to create Internet Explorer driver: " + e.getMessage(), e);
            }
        } // End of synchronized block
    }
    
    /**
     * Check if running on Windows 11
     */
    private static boolean isWindows11() {
        try {
            // Try to get Windows version using command
            ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/c", "ver");
            Process p = pb.start();
            java.io.BufferedReader reader = new java.io.BufferedReader(
                new java.io.InputStreamReader(p.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                // Windows 11 shows as version 10.0 with build >= 22000
                if (line.contains("Version 10.0") && line.contains("22")) {
                    return true;
                }
            }
            
            // Alternative check using system properties
            String osName = System.getProperty("os.name");
            if (osName != null && osName.contains("Windows 11")) {
                return true;
            }
            
            // Check using Windows registry if available
            try {
                ProcessBuilder regPb = new ProcessBuilder("reg", "query", 
                    "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "/v", "CurrentBuild");
                Process regP = regPb.start();
                java.io.BufferedReader regReader = new java.io.BufferedReader(
                    new java.io.InputStreamReader(regP.getInputStream()));
                String regLine;
                while ((regLine = regReader.readLine()) != null) {
                    if (regLine.contains("CurrentBuild")) {
                        String[] parts = regLine.trim().split("\\s+");
                        if (parts.length > 2) {
                            int build = Integer.parseInt(parts[parts.length - 1]);
                            if (build >= 22000) {
                                return true;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                logger.debug("Could not check registry: {}", e.getMessage());
            }
        } catch (Exception e) {
            logger.debug("Could not determine Windows version: {}", e.getMessage());
        }
        return false;
    }
    
    /**
     * Create Edge driver with IE mode for Windows 11
     */
    private static WebDriver createEdgeWithIEMode(Map<String, Object> capabilities) {
        logger.info("Creating Edge driver with IE compatibility mode for Windows 11");
        logger.info("This is the ONLY way to run IE mode tests on Windows 11");
        
        // Setup EdgeDriver
        WebDriverManager.edgedriver().setup();
        
        EdgeOptions options = new EdgeOptions();
        
        // CRITICAL: Enable IE mode in Edge
        Map<String, Object> ieOptions = new HashMap<>();
        ieOptions.put("ie.edgechromium", true);
        ieOptions.put("ignoreProtectedModeSettings", true);
        ieOptions.put("ignoreZoomSetting", true);
        ieOptions.put("requireWindowFocus", false);
        ieOptions.put("enablePersistentHover", true);
        ieOptions.put("nativeEvents", false);
        ieOptions.put("initialBrowserUrl", "about:blank");
        ieOptions.put("ensureCleanSession", true);
        
        // Set IE options in Edge
        options.setCapability("se:ieOptions", ieOptions);
        
        // Enable IE mode
        options.setCapability("ie.edgechromium", true);
        
        // Set Edge to use IE mode
        Map<String, Object> edgeOptions = new HashMap<>();
        edgeOptions.put("ie", new HashMap<String, Object>() {{
            put("edgechromium", true);
            put("mode", "ie");
        }});
        options.setCapability("ms:edgeOptions", edgeOptions);
        
        // Add arguments for better compatibility
        options.addArguments("--ie-mode-test");
        options.addArguments("--internet-explorer-integration=iemode");
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        options.addArguments("--disable-gpu");
        options.addArguments("--window-size=1920,1080");
        
        // Add custom capabilities
        if (capabilities != null) {
            capabilities.forEach(options::setCapability);
        }
        
        try {
            logger.info("Starting Edge driver with IE mode enabled...");
            EdgeDriver driver = new EdgeDriver(options);
            logger.info("Edge driver created successfully");
            
            // Set timeouts
            driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(60));
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
            driver.manage().timeouts().scriptTimeout(Duration.ofSeconds(30));
            
            logger.info("Edge is running with IE mode support - your legacy application should work");
            logger.info("Note: You may see 'Internet Explorer mode' in the Edge address bar");
            
            return driver;
        } catch (Exception e) {
            throw new CSWebDriverException("Failed to create Edge driver with IE mode: " + e.getMessage(), e);
        }
    }
    
    /**
     * Check if Windows 11 or later
     */
    private static boolean isWin11OrLater() {
        try {
            String version = System.getProperty("os.version");
            if (version != null) {
                // Windows 11 has version 10.0 with build >= 22000
                String[] parts = version.split("\\.");
                if (parts.length >= 2) {
                    int major = Integer.parseInt(parts[0]);
                    return major >= 10; // Simplified check
                }
            }
        } catch (Exception e) {
            logger.debug("Could not determine Windows version: {}", e.getMessage());
        }
        return false;
    }
    
    /**
     * Find Edge executable path on Windows
     */
    private static String findEdgeExecutablePath() {
        String[] possiblePaths = {
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
            "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe",
            System.getenv("PROGRAMFILES(X86)") + "\\Microsoft\\Edge\\Application\\msedge.exe",
            System.getenv("PROGRAMFILES") + "\\Microsoft\\Edge\\Application\\msedge.exe"
        };
        
        for (String path : possiblePaths) {
            if (path != null && new java.io.File(path).exists()) {
                return path;
            }
        }
        
        logger.warn("Edge executable not found in standard locations");
        return null;
    }
    
    /**
     * Create remote WebDriver
     */
    private static WebDriver createRemoteDriver(String browserType, String remoteUrl, 
                                               boolean headless, Map<String, Object> capabilities) {
        try {
            URL url = new URL(remoteUrl);
            
            switch (browserType.toLowerCase()) {
                case "chrome":
                    ChromeOptions chromeOptions = new ChromeOptions();
                    if (headless) chromeOptions.addArguments("--headless=new");
                    if (capabilities != null) capabilities.forEach(chromeOptions::setCapability);
                    return new RemoteWebDriver(url, chromeOptions);
                    
                case "firefox":
                    FirefoxOptions firefoxOptions = new FirefoxOptions();
                    if (headless) firefoxOptions.addArguments("--headless");
                    if (capabilities != null) capabilities.forEach(firefoxOptions::setCapability);
                    return new RemoteWebDriver(url, firefoxOptions);
                    
                case "edge":
                    EdgeOptions edgeOptions = new EdgeOptions();
                    if (headless) edgeOptions.addArguments("--headless=new");
                    if (capabilities != null) capabilities.forEach(edgeOptions::setCapability);
                    return new RemoteWebDriver(url, edgeOptions);
                    
                case "safari":
                    SafariOptions safariOptions = new SafariOptions();
                    if (capabilities != null) capabilities.forEach(safariOptions::setCapability);
                    return new RemoteWebDriver(url, safariOptions);
                    
                default:
                    throw new CSFrameworkException("Unsupported browser type for remote execution: " + browserType);
            }
        } catch (Exception e) {
            throw new CSFrameworkException("Failed to create remote driver", e);
        }
    }
    
    /**
     * Configure driver with common settings
     */
    private static void configureDriver(WebDriver driver) {
        // Set timeouts
        Duration implicitWait = Duration.ofSeconds(config.getIntProperty("selenium.implicit.wait", 10));
        Duration pageLoadTimeout = Duration.ofSeconds(config.getIntProperty("selenium.pageload.timeout", 30));
        Duration scriptTimeout = Duration.ofSeconds(config.getIntProperty("selenium.script.timeout", 30));
        
        driver.manage().timeouts().implicitlyWait(implicitWait);
        driver.manage().timeouts().pageLoadTimeout(pageLoadTimeout);
        driver.manage().timeouts().scriptTimeout(scriptTimeout);
        
        // Maximize window
        if (config.getBooleanProperty("browser.maximize", true)) {
            driver.manage().window().maximize();
        }
        
        // Delete cookies
        if (config.getBooleanProperty("browser.delete.cookies", true)) {
            driver.manage().deleteAllCookies();
        }
    }
    
    /**
     * Get current thread's driver
     */
    public static WebDriver getDriver() {
        WebDriver driver = threadLocalDriver.get();
        logger.debug("Getting driver for thread {} (ID: {}): {}", 
            Thread.currentThread().getName(), 
            Thread.currentThread().getId(),
            driver != null ? "FOUND" : "NULL");
        return driver;
    }
    
    /**
     * Set driver for current thread
     */
    public static void setDriver(WebDriver driver) {
        threadLocalDriver.set(driver);
        String threadId = String.valueOf(Thread.currentThread().getId());
        driverPool.put(threadId, driver);
    }
    
    /**
     * Quit current thread's driver
     */
    public static void quitDriver() {
        WebDriver driver = threadLocalDriver.get();
        if (driver != null) {
            try {
                driver.quit();
                logger.info("Driver quit successfully");
            } catch (Exception e) {
                logger.error("Error quitting driver", e);
            } finally {
                threadLocalDriver.remove();
                String threadId = String.valueOf(Thread.currentThread().getId());
                driverPool.remove(threadId);
                // Release the semaphore permit
                browserSemaphore.release();
                logger.info("Released browser permit. Available permits: {}", browserSemaphore.availablePermits());
            }
        }
    }
    
    /**
     * Quit all drivers - more robust cleanup
     */
    public static synchronized void quitAllDrivers() {
        logger.info("Quitting all {} drivers in pool", driverPool.size());
        
        // Create a copy to avoid concurrent modification
        Map<String, WebDriver> driversCopy = new HashMap<>(driverPool);
        
        driversCopy.forEach((threadId, driver) -> {
            try {
                if (driver != null) {
                    // Check if driver session is still active
                    try {
                        driver.getTitle(); // Test if driver is still responsive
                        logger.info("Closing driver for thread {}", threadId);
                        driver.quit();
                        // Release semaphore permit for each closed driver
                        browserSemaphore.release();
                        logger.info("Released browser permit for thread {}", threadId);
                    } catch (Exception sessionError) {
                        // Driver session already closed, just log it
                        logger.debug("Driver session already closed for thread {}", threadId);
                        // Still release the permit
                        browserSemaphore.release();
                    }
                }
            } catch (Exception e) {
                logger.error("Error quitting driver for thread {}", threadId, e);
            }
        });
        
        // Clear all references
        driverPool.clear();
        
        // Also check and clear ThreadLocal
        WebDriver localDriver = threadLocalDriver.get();
        if (localDriver != null) {
            try {
                localDriver.quit();
            } catch (Exception e) {
                logger.debug("Error quitting thread-local driver", e);
            }
            threadLocalDriver.remove();
        }
    }
    
    /**
     * Take screenshot
     */
    public static File takeScreenshot(String filePath) {
        try {
            WebDriver driver = getDriver();
            byte[] screenshotData = CSScreenshotUtils.captureScreenshot(driver);
            
            if (screenshotData == null || screenshotData.length == 0) {
                logger.warn("Screenshot data is empty");
                return null;
            }
            
            // Check if we should skip saving to file (when embedding is enabled)
            CSConfigManager config = CSConfigManager.getInstance();
            boolean embedScreenshots = Boolean.parseBoolean(
                config.getProperty("cs.report.screenshots.embed", "false")
            );
            
            if (embedScreenshots) {
                // When embedding, still create a temporary file for processing
                // but it will be deleted after being embedded in the report
                Path path = Paths.get(filePath);
                Files.createDirectories(path.getParent());
                Files.write(path, screenshotData);
                logger.debug("Screenshot temporarily saved for embedding: {}", filePath);
                return path.toFile();
            } else {
                // Normal file saving when not embedding
                Path path = Paths.get(filePath);
                Files.createDirectories(path.getParent());
                Files.write(path, screenshotData);
                logger.info("Screenshot saved to: {}", filePath);
                return path.toFile();
            }
            
        } catch (IOException e) {
            logger.error("Failed to save screenshot", e);
            return null;
        }
    }
    
    /**
     * Take screenshot as bytes
     */
    public static byte[] takeScreenshot() {
        WebDriver driver = getDriver();
        return CSScreenshotUtils.captureScreenshot(driver);
    }
    
    /**
     * Check if driver is active
     */
    public static boolean isDriverActive() {
        WebDriver driver = getDriver();
        if (driver == null) {
            return false;
        }
        
        try {
            driver.getTitle();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Get driver pool size
     */
    public static int getDriverPoolSize() {
        return driverPool.size();
    }
}